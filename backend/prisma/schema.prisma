// To create a new migration:
// npx prisma migrate dev --name init
// or docker exec -it backend npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  name        String
  email       String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  posts       Post[]
  Comment     Comment[]
  intervenant Intervenant?
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  postId    String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post @relation(fields: [postId], references: [id])
  author User @relation(fields: [authorId], references: [id])
  materiels Materiel[]
}

model Salle {
  id        String   @id @default(cuid())
  name      String
  capacite  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course[]
}

model Matiere {
  id        String           @id @default(cuid())
  name      String
  semester  Int
  color     String
  mappings  MatiereMapping[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Promotion {
  id        String           @id @default(cuid())
  name      String
  students  Int
  mappings  MatiereMapping[]
  courses   Course[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model MatiereMapping {
  id          String    @id @default(cuid())
  volumeHeure Int
  matiereId   String
  promotionId String
  matiere     Matiere   @relation(fields: [matiereId], references: [id])
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  courses     Course[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([matiereId, promotionId])
}

model Intervenant {
  id               String            @id @default(cuid())
  userId           String            @unique
  name             String
  firstname        String
  courses          Course[]
  indisponibilites Indisponibilite[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user             User              @relation(fields: [userId], references: [id])
}

model Course {
  id               String         @id @default(cuid())
  start            DateTime
  end              DateTime
  intervenantId    String
  salleId          String
  Salle            Salle          @relation(fields: [salleId], references: [id])
  matiereMappingId String
  intervenant      Intervenant    @relation(fields: [intervenantId], references: [id])
  matiereMapping   MatiereMapping @relation(fields: [matiereMappingId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Promotion        Promotion?     @relation(fields: [promotionId], references: [id])
  promotionId      String?
}

model Indisponibilite {
  id            String      @id @default(cuid())
  start         DateTime
  end           DateTime
  intervenantId String
  intervenant   Intervenant @relation(fields: [intervenantId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Pause {
  id          String   @id @default(cuid())
  start       DateTime
  end         DateTime
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  materiels Materiel[]
}

model Materiel {
  id        String   @id @default(cuid())
  description String
  assignedBool Boolean @default(false)
  assignedTo User? @relation(fields: [assignedToId], references: [id])
  assignedToId String?
  assignedToSalle Salle? @relation(fields: [assignedToSalleId], references: [id])
  assignedToSalleId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
